// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prodata.pro
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from prodata.pro</summary>
public static partial class ProdataReflection {

  #region Descriptor
  /// <summary>File descriptor for prodata.pro</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProdataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgtwcm9kYXRhLnBybyIjCgdQcm9UZXN0EgoKAmlkGAEgASgFEgwKBG5pY2sY",
          "AiABKAkiQAoGSGVhZGVyEgoKAmlkGAEgASgREgwKBGRhdGEYAiABKAwSCwoD",
          "c2VxGAMgASgFEg8KB21zZ1R5cGUYBCABKAUiLQoZQzAwMDFfSGVhcnRiZWF0",
          "UmVxTWVzc2FnZRIQCghzZW5kVGltZRgBIAEoAiIuChpDMDAwMV9IZWFydGJl",
          "YXRSZXNwTWVzc2FnZRIQCghzZW5kVGltZRgBIAEoAiIpChVDMDAwMl9DbG9j",
          "a1JlcU1lc3NhZ2USEAoIcmVxQ2xvY2sYASABKAMiPwoWQzAwMDJfQ2xvY2tS",
          "ZXNwTWVzc2FnZRIQCghyZXFDbG9jaxgBIAEoAxITCgtzZXJ2ZXJDbG9jaxgC",
          "IAEoAyIpChZDMDAwM19UaXBOb3RpZnlNZXNzYWdlEg8KB2NvbnRlbnQYASAB",
          "KAliBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ProTest), global::ProTest.Parser, new[]{ "Id", "Nick" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Header), global::Header.Parser, new[]{ "Id", "Data", "Seq", "MsgType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C0001_HeartbeatReqMessage), global::C0001_HeartbeatReqMessage.Parser, new[]{ "SendTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C0001_HeartbeatRespMessage), global::C0001_HeartbeatRespMessage.Parser, new[]{ "SendTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C0002_ClockReqMessage), global::C0002_ClockReqMessage.Parser, new[]{ "ReqClock" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C0002_ClockRespMessage), global::C0002_ClockRespMessage.Parser, new[]{ "ReqClock", "ServerClock" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::C0003_TipNotifyMessage), global::C0003_TipNotifyMessage.Parser, new[]{ "Content" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ProTest : pb::IMessage<ProTest> {
  private static readonly pb::MessageParser<ProTest> _parser = new pb::MessageParser<ProTest>(() => new ProTest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProTest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProdataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProTest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProTest(ProTest other) : this() {
    id_ = other.id_;
    nick_ = other.nick_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProTest Clone() {
    return new ProTest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "nick" field.</summary>
  public const int NickFieldNumber = 2;
  private string nick_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nick {
    get { return nick_; }
    set {
      nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProTest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProTest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Nick != other.Nick) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Nick.Length != 0) hash ^= Nick.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Nick.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Nick);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Nick.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProTest other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Nick.Length != 0) {
      Nick = other.Nick;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Nick = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Header : pb::IMessage<Header> {
  private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Header> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProdataReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Header() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Header(Header other) : this() {
    id_ = other.id_;
    data_ = other.data_;
    seq_ = other.seq_;
    msgType_ = other.msgType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Header Clone() {
    return new Header(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "seq" field.</summary>
  public const int SeqFieldNumber = 3;
  private int seq_;
  /// <summary>
  ///  序列，默认0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seq {
    get { return seq_; }
    set {
      seq_ = value;
    }
  }

  /// <summary>Field number for the "msgType" field.</summary>
  public const int MsgTypeFieldNumber = 4;
  private int msgType_;
  /// <summary>
  ///  0=push, 1=req, 2=resp  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MsgType {
    get { return msgType_; }
    set {
      msgType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Header);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Header other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Data != other.Data) return false;
    if (Seq != other.Seq) return false;
    if (MsgType != other.MsgType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (Seq != 0) hash ^= Seq.GetHashCode();
    if (MsgType != 0) hash ^= MsgType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteSInt32(Id);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Data);
    }
    if (Seq != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seq);
    }
    if (MsgType != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(MsgType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Id);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (Seq != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seq);
    }
    if (MsgType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Header other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    if (other.Seq != 0) {
      Seq = other.Seq;
    }
    if (other.MsgType != 0) {
      MsgType = other.MsgType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadSInt32();
          break;
        }
        case 18: {
          Data = input.ReadBytes();
          break;
        }
        case 24: {
          Seq = input.ReadInt32();
          break;
        }
        case 32: {
          MsgType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///  心跳消息
/// </summary>
public sealed partial class C0001_HeartbeatReqMessage : pb::IMessage<C0001_HeartbeatReqMessage> {
  private static readonly pb::MessageParser<C0001_HeartbeatReqMessage> _parser = new pb::MessageParser<C0001_HeartbeatReqMessage>(() => new C0001_HeartbeatReqMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C0001_HeartbeatReqMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProdataReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0001_HeartbeatReqMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0001_HeartbeatReqMessage(C0001_HeartbeatReqMessage other) : this() {
    sendTime_ = other.sendTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0001_HeartbeatReqMessage Clone() {
    return new C0001_HeartbeatReqMessage(this);
  }

  /// <summary>Field number for the "sendTime" field.</summary>
  public const int SendTimeFieldNumber = 1;
  private float sendTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SendTime {
    get { return sendTime_; }
    set {
      sendTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C0001_HeartbeatReqMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C0001_HeartbeatReqMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SendTime != other.SendTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SendTime != 0F) hash ^= SendTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SendTime != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(SendTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SendTime != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C0001_HeartbeatReqMessage other) {
    if (other == null) {
      return;
    }
    if (other.SendTime != 0F) {
      SendTime = other.SendTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          SendTime = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class C0001_HeartbeatRespMessage : pb::IMessage<C0001_HeartbeatRespMessage> {
  private static readonly pb::MessageParser<C0001_HeartbeatRespMessage> _parser = new pb::MessageParser<C0001_HeartbeatRespMessage>(() => new C0001_HeartbeatRespMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C0001_HeartbeatRespMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProdataReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0001_HeartbeatRespMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0001_HeartbeatRespMessage(C0001_HeartbeatRespMessage other) : this() {
    sendTime_ = other.sendTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0001_HeartbeatRespMessage Clone() {
    return new C0001_HeartbeatRespMessage(this);
  }

  /// <summary>Field number for the "sendTime" field.</summary>
  public const int SendTimeFieldNumber = 1;
  private float sendTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SendTime {
    get { return sendTime_; }
    set {
      sendTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C0001_HeartbeatRespMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C0001_HeartbeatRespMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SendTime != other.SendTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SendTime != 0F) hash ^= SendTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SendTime != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(SendTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SendTime != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C0001_HeartbeatRespMessage other) {
    if (other == null) {
      return;
    }
    if (other.SendTime != 0F) {
      SendTime = other.SendTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          SendTime = input.ReadFloat();
          break;
        }
      }
    }
  }

}

/// <summary>
///  时钟同步
/// </summary>
public sealed partial class C0002_ClockReqMessage : pb::IMessage<C0002_ClockReqMessage> {
  private static readonly pb::MessageParser<C0002_ClockReqMessage> _parser = new pb::MessageParser<C0002_ClockReqMessage>(() => new C0002_ClockReqMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C0002_ClockReqMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProdataReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0002_ClockReqMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0002_ClockReqMessage(C0002_ClockReqMessage other) : this() {
    reqClock_ = other.reqClock_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0002_ClockReqMessage Clone() {
    return new C0002_ClockReqMessage(this);
  }

  /// <summary>Field number for the "reqClock" field.</summary>
  public const int ReqClockFieldNumber = 1;
  private long reqClock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ReqClock {
    get { return reqClock_; }
    set {
      reqClock_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C0002_ClockReqMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C0002_ClockReqMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReqClock != other.ReqClock) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ReqClock != 0L) hash ^= ReqClock.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ReqClock != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ReqClock);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ReqClock != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReqClock);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C0002_ClockReqMessage other) {
    if (other == null) {
      return;
    }
    if (other.ReqClock != 0L) {
      ReqClock = other.ReqClock;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ReqClock = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class C0002_ClockRespMessage : pb::IMessage<C0002_ClockRespMessage> {
  private static readonly pb::MessageParser<C0002_ClockRespMessage> _parser = new pb::MessageParser<C0002_ClockRespMessage>(() => new C0002_ClockRespMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C0002_ClockRespMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProdataReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0002_ClockRespMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0002_ClockRespMessage(C0002_ClockRespMessage other) : this() {
    reqClock_ = other.reqClock_;
    serverClock_ = other.serverClock_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0002_ClockRespMessage Clone() {
    return new C0002_ClockRespMessage(this);
  }

  /// <summary>Field number for the "reqClock" field.</summary>
  public const int ReqClockFieldNumber = 1;
  private long reqClock_;
  /// <summary>
  ///  请求中的reqClock,服务器主动同步时钟时此值为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ReqClock {
    get { return reqClock_; }
    set {
      reqClock_ = value;
    }
  }

  /// <summary>Field number for the "serverClock" field.</summary>
  public const int ServerClockFieldNumber = 2;
  private long serverClock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ServerClock {
    get { return serverClock_; }
    set {
      serverClock_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C0002_ClockRespMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C0002_ClockRespMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReqClock != other.ReqClock) return false;
    if (ServerClock != other.ServerClock) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ReqClock != 0L) hash ^= ReqClock.GetHashCode();
    if (ServerClock != 0L) hash ^= ServerClock.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ReqClock != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ReqClock);
    }
    if (ServerClock != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ServerClock);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ReqClock != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReqClock);
    }
    if (ServerClock != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerClock);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C0002_ClockRespMessage other) {
    if (other == null) {
      return;
    }
    if (other.ReqClock != 0L) {
      ReqClock = other.ReqClock;
    }
    if (other.ServerClock != 0L) {
      ServerClock = other.ServerClock;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ReqClock = input.ReadInt64();
          break;
        }
        case 16: {
          ServerClock = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 提示消息
/// </summary>
public sealed partial class C0003_TipNotifyMessage : pb::IMessage<C0003_TipNotifyMessage> {
  private static readonly pb::MessageParser<C0003_TipNotifyMessage> _parser = new pb::MessageParser<C0003_TipNotifyMessage>(() => new C0003_TipNotifyMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<C0003_TipNotifyMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProdataReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0003_TipNotifyMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0003_TipNotifyMessage(C0003_TipNotifyMessage other) : this() {
    content_ = other.content_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public C0003_TipNotifyMessage Clone() {
    return new C0003_TipNotifyMessage(this);
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 1;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as C0003_TipNotifyMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(C0003_TipNotifyMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Content != other.Content) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Content.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Content);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(C0003_TipNotifyMessage other) {
    if (other == null) {
      return;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Content = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
